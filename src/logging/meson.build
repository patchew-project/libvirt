log_driver_sources = [
  'log_manager.c',
]

log_protocol = 'log_protocol.x'

log_protocol_generated = []

log_protocol_generated += custom_target(
  'log_protocol.h',
  input: log_protocol,
  output: 'log_protocol.h',
  command: [
    genprotocol_prog, rpcgen_prog, '-h', '@INPUT@', '@OUTPUT@'
  ],
)

log_protocol_generated += custom_target(
  'log_protocol.c',
  input: log_protocol,
  output: 'log_protocol.c',
  command: [
    genprotocol_prog, rpcgen_prog, '-c', '@INPUT@', '@OUTPUT@'
  ],
)

log_daemon_sources = files(
  'log_daemon.c',
  'log_daemon_config.c',
  'log_daemon_dispatch.c',
  'log_handler.c',
)

log_driver_lib = static_library(
  'virt_log_driver',
  [
    log_driver_sources,
    log_protocol_generated,
  ],
  dependencies: [
    rpc_dep,
    src_dep,
    xdr_dep,
  ],
)

libvirt_libs += log_driver_lib

if conf.has('WITH_LIBVIRTD')
  log_daemon_generated = custom_target(
    'log_daemon_dispatch_stubs.h',
    input: log_protocol,
    output: 'log_daemon_dispatch_stubs.h',
    command: [
      gendispatch_prog, '--mode=server',
      'virLogManagerProtocol', 'VIR_LOG_MANAGER_PROTOCOL', '@INPUT@',
    ],
    capture: true,
  )

  virt_daemons += {
    'name': 'virtlogd',
    'sources': [
      log_daemon_sources,
      log_daemon_generated,
      log_protocol_generated,
    ],
    'include': [
      include_directories('.'),
    ],
  }
endif
