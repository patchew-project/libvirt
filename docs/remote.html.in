<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <body>
    <h1 >Remote support</h1>
    <p>
Libvirt allows you to access hypervisors running on remote
machines through authenticated and encrypted connections.
</p>
    <ul id="toc"></ul>

    <h2>
      <a id="Remote_basic_usage">Basic usage</a>
    </h2>
    <p>
On the remote machine, <code>libvirtd</code> should be running in general.
See <a href="#Remote_libvirtd_configuration">the section
on configuring libvirtd</a> for more information.
</p>
    <p>
    Not all hypervisors supported by libvirt require a running
    <code>libvirtd</code>. If you want to connect to a VMware ESX/ESXi or
    GSX server then <code>libvirtd</code> is not necessary. See the
    <a href="drvesx.html">VMware ESX page</a> for details.
    </p>
    <p>
To tell libvirt that you want to access a remote resource,
you should supply a hostname in the normal <a href="uri.html">URI</a> that is passed
to <code>virConnectOpen</code> (or <code>virsh -c ...</code>).
For example, if you normally use <code>qemu:///system</code>
to access the system-wide QEMU daemon, then to access
the system-wide QEMU daemon on a remote machine called
<code>compute1.libvirt.org</code> you would use
<code>qemu://compute1.libvirt.org/system</code>.
</p>
    <p>
The <a href="#Remote_URI_reference">section on remote URIs</a>
describes in more detail these remote URIs.
</p>
    <p>
From an API point of view, apart from the change in URI, the
API should behave the same.  For example, ordinary calls
are routed over the remote connection transparently, and
values or errors from the remote side are returned to you
as if they happened locally.  Some differences you may notice:
</p>
    <ul>
      <li> Additional errors can be generated, specifically ones
relating to failures in the remote transport itself. </li>
      <li> Remote calls are handled synchronously, so they will be
much slower than, say, direct hypervisor calls. </li>
    </ul>
    <h2>
      <a id="Remote_transports">Transports</a>
    </h2>
    <p>
Remote libvirt supports a range of transports:
</p>
    <dl>
      <dt><code>tls</code></dt>
      <dd><a href="http://en.wikipedia.org/wiki/Transport_Layer_Security" title="Transport Layer Security">TLS</a>
 1.0 (SSL 3.1) authenticated and encrypted TCP/IP socket, usually
 listening on a public port number.  To use this you will need to
 <a href="tlscerts.html" title="Generating TLS certificates">generate client and
 server certificates</a>.
 The standard port is 16514.
 </dd>
      <dt><code>unix</code></dt>
      <dd> Unix domain socket.  Since this is only accessible on the
 local machine, it is not encrypted, and uses Unix permissions or
 SELinux for authentication.
 The standard socket names are
 <code>/var/run/libvirt/libvirt-sock</code> and
 <code>/var/run/libvirt/libvirt-sock-ro</code> (the latter
 for read-only connections).
 </dd>
      <dt><code>ssh</code></dt>
      <dd> Transported over an ordinary
 <a href="http://www.openssh.com/" title="OpenSSH homepage">ssh
 (secure shell)</a> connection.
 Requires <a href="http://netcat.sourceforge.net/">Netcat (nc)</a>
 installed and libvirtd should be running
 on the remote machine.  You should use some sort of
 ssh key management (eg.
 <a href="http://mah.everybody.org/docs/ssh" title="Using ssh-agent with ssh">ssh-agent</a>)
 otherwise programs which use
 this transport will stop to ask for a password. </dd>
      <dt><code>ext</code></dt>
      <dd> Any external program which can make a connection to the
 remote machine by means outside the scope of libvirt. </dd>
      <dt><code>tcp</code></dt>
      <dd> Unencrypted TCP/IP socket.  Not recommended for production
 use, this is normally disabled, but an administrator can enable
 it for testing or use over a trusted network.
 The standard port is 16509. </dd>
      <dt><code>libssh2</code></dt>
      <dd> Transport over the SSH protocol using
      <a href="http://libssh2.org/" title="libssh2 homepage">libssh2</a> instead
of the OpenSSH binary. This transport uses the libvirt authentication callback for
all ssh authentication calls and therefore supports keyboard-interactive authentication
even with graphical management applications. As with the classic ssh transport
netcat is required on the remote side.</dd>
      <dt><code>libssh</code></dt>
      <dd> Transport over the SSH protocol using
      <a href="http://libssh.org/" title="libssh homepage">libssh</a> instead
of the OpenSSH binary. This transport uses the libvirt authentication callback for
all ssh authentication calls and therefore supports keyboard-interactive authentication
even with graphical management applications. As with the classic ssh transport
netcat is required on the remote side.</dd>
    </dl>
    <p>
The default transport, if no other is specified, is <code>tls</code>.
</p>
    <h2>
      <a id="Remote_URI_reference">Remote URIs</a>
    </h2>
    <p>
See also: <a href="uri.html">documentation on ordinary ("local") URIs</a>.
</p>
    <p>
Remote URIs have the general form ("[...]" meaning an optional part):
</p>
    <p><code>driver</code>[<code>+transport</code>]<code>://</code>[<code>username@</code>][<code>hostname</code>][<code>:port</code>]<code>/</code>[<code>path</code>][<code>?extraparameters</code>]
</p>
    <p>
Either the transport or the hostname must be given in order
to distinguish this from a local URI.
</p>
    <p>
Some examples:
</p>
    <ul>
      <li><code>xen+ssh://rjones@towada/system</code><br/> &#x2014; Connect to a
remote Xen hypervisor on host <code>towada</code> using ssh transport and ssh
username <code>rjones</code>.
</li>
      <li><code>xen://towada/system</code><br/> &#x2014; Connect to a
remote Xen hypervisor on host <code>towada</code> using TLS.
</li>
      <li><code>xen://towada/system?no_verify=1</code><br/> &#x2014; Connect to a
remote Xen hypervisor on host <code>towada</code> using TLS.  Do not verify
the server's certificate.
</li>
      <li><code>qemu+unix:///system?socket=/opt/libvirt/run/libvirt/libvirt-sock</code><br/> &#x2014;
Connect to the local qemu instances over a non-standard
Unix socket (the full path to the Unix socket is
supplied explicitly in this case).
</li>
      <li><code>test+tcp://localhost:5000/default</code><br/> &#x2014;
Connect to a libvirtd daemon offering unencrypted TCP/IP connections
on localhost port 5000 and use the test driver with default
settings.
</li>
<li><code>qemu+libssh2://user@host/system?known_hosts=/home/user/.ssh/known_hosts</code><br/> &#x2014;
Connect to a remote host using a ssh connection with the libssh2 driver
and use a different known_hosts file.</li>
<li><code>qemu+libssh://user@host/system?known_hosts=/home/user/.ssh/known_hosts</code><br/> &#x2014;
Connect to a remote host using a ssh connection with the libssh driver
and use a different known_hosts file.</li>
    </ul>
    <h3>
      <a id="Remote_URI_parameters">Extra parameters</a>
    </h3>
    <p>
Extra parameters can be added to remote URIs as part
of the query string (the part following <q><code>?</code></q>).
Remote URIs understand the extra parameters shown below.
Any others are passed unmodified through to the back end.
Note that parameter values must be
<a href="http://xmlsoft.org/html/libxml-uri.html#xmlURIEscapeStr">URI-escaped</a>.
</p>
    <table class="top_table">
      <tr>
        <th> Name </th>
        <th> Transports </th>
        <th> Meaning </th>
      </tr>
      <tr>
        <td>
          <code>name</code>
        </td>
        <td>
          <i>any transport</i>
        </td>
        <td>
  The name passed to the remote virConnectOpen function.  The
  name is normally formed by removing transport, hostname, port
  number, username and extra parameters from the remote URI, but in certain
  very complex cases it may be better to supply the name explicitly.
</td>
      </tr>
      <tr>
        <td colspan="2"/>
        <td> Example: <code>name=qemu:///system</code> </td>
      </tr>
      <tr>
        <td>
          <code>tls_priority</code>
        </td>
        <td> tls </td>
        <td>
  A vaid GNUTLS priority string
</td>
      </tr>
      <tr>
        <td colspan="2"/>
        <td> Example: <code>tls_priority=NORMAL:-VERS-SSL3.0</code> </td>
      </tr>
      <tr>
        <td>
          <code>mode</code>
        </td>
        <td> unix, ssh, libssh, libssh2 </td>
        <td>
          <dl>
            <dt><code>auto</code></dt><dd>automatically determine the daemon</dd>
            <dt><code>direct</code></dt><dd>connect to per-driver daemons</dd>
            <dt><code>legacy</code></dt><dd>connect to libvirtd</dd>
          </dl>
          Can also be set in <code>libvirt.conf</code> as <code>remote_mode</code>
        </td>
      </tr>
      <tr>
        <td colspan="2"/>
        <td> Example: <code>mode=direct</code> </td>
      </tr>
      <tr>
        <td>
          <code>command</code>
        </td>
        <td> ssh, ext </td>
        <td>
  The external command.  For ext transport this is required.
  For ssh the default is <code>ssh</code>.
  The PATH is searched for the command.
</td>
      </tr>
      <tr>
        <td colspan="2"/>
        <td> Example: <code>command=/opt/openssh/bin/ssh</code> </td>
      </tr>
      <tr>
        <td>
          <code>socket</code>
        </td>
        <td> unix, ssh, libssh2, libssh </td>
        <td>
  The path to the Unix domain socket, which overrides the
  compiled-in default.  For ssh transport, this is passed to
  the remote netcat command (see next).
</td>
      </tr>
      <tr>
        <td colspan="2"/>
        <td> Example: <code>socket=/opt/libvirt/run/libvirt/libvirt-sock</code> </td>
      </tr>
      <tr>
        <td>
          <code>netcat</code>
        </td>
        <td> ssh, libssh2, libssh </td>
        <td>
  The name of the netcat command on the remote machine.
  The default is <code>nc</code>.  For ssh transport, libvirt
  constructs an ssh command which looks like:

<pre><i>command</i> -p <i>port</i> [-l <i>username</i>] <i>hostname</i> <i>netcat</i> -U <i>socket</i>
</pre>

  where <i>port</i>, <i>username</i>, <i>hostname</i> can be
  specified as part of the remote URI, and <i>command</i>, <i>netcat</i>
  and <i>socket</i> come from extra parameters (or
  sensible defaults).

</td>
      </tr>
      <tr>
        <td colspan="2"/>
        <td> Example: <code>netcat=/opt/netcat/bin/nc</code> </td>
      </tr>

      <tr>
        <td>
          <code>keyfile</code>
        </td>
        <td> ssh, libssh2, libssh </td>
        <td>
  The name of the private key file to use to authentication to the remote
  machine.  If this option is not used the default keys are used.
        </td>
      </tr>
      <tr>
        <td colspan="2"/>
        <td> Example: <code>keyfile=/root/.ssh/example_key</code> </td>
      </tr>

      <tr>
        <td>
          <code>no_verify</code>
        </td>
        <td> ssh, tls </td>
        <td>
  SSH: If set to a non-zero value, this disables client's strict host key
  checking making it auto-accept new host keys.  Existing host keys will
  still be validated.
  <br/>
  <br/>
  TLS: If set to a non-zero value, this disables client checks of the
  server's certificate.  Note that to disable server checks of
  the client's certificate or IP address you must
  <a href="#Remote_libvirtd_configuration">change the libvirtd
  configuration</a>.
</td>
      </tr>
      <tr>
        <td colspan="2"/>
        <td> Example: <code>no_verify=1</code> </td>
      </tr>
      <tr>
        <td>
          <code>no_tty</code>
        </td>
        <td> ssh </td>
        <td>
  If set to a non-zero value, this stops ssh from asking for
  a password if it cannot log in to the remote machine automatically
  (eg. using ssh-agent etc.).  Use this when you don't have access
  to a terminal - for example in graphical programs which use libvirt.
</td>
      </tr>
      <tr>
        <td colspan="2"/>
        <td> Example: <code>no_tty=1</code> </td>
      </tr>
      <tr>
        <td>
          <code>pkipath</code>
        </td>
        <td> tls</td>
        <td>
          Specifies x509 certificates path for the client. If any of
          the CA certificate, client certificate, or client key is
          missing, the connection will fail with a fatal error.
        </td>
      </tr>
      <tr>
        <td colspan="2"/>
        <td> Example: <code>pkipath=/tmp/pki/client</code> </td>
      </tr>
      <tr>
        <td>
          <code>known_hosts</code>
        </td>
        <td> libssh2, libssh </td>
        <td>
  Path to the known_hosts file to verify the host key against. LibSSH2 and
  libssh support OpenSSH-style known_hosts files, although LibSSH2 does not
  support all key types, so using files created by the OpenSSH binary may
  result into truncating the known_hosts file. Thus, with LibSSH2 it's
  recommended to use the default known_hosts file is located in libvirt's
  client local configuration directory e.g.: ~/.config/libvirt/known_hosts.
  Note: Use absolute paths.
</td>
      </tr>
      <tr>
        <td colspan="2"/>
        <td> Example: <code>known_hosts=/root/.ssh/known_hosts</code> </td>
      </tr>
      <tr>
        <td>
          <code>sshauth</code>
        </td>
        <td> libssh2, libssh </td>
        <td>
  A comma separated list of authentication methods to use. Default (is
  "agent,privkey,password,keyboard-interactive". The order of the methods
  is preserved. Some methods may require additional parameters.
</td>
      </tr>
      <tr>
        <td colspan="2"/>
        <td> Example: <code>sshauth=privkey,agent</code> </td>
      </tr>
    </table>
    <h2>
      <a id="Remote_libvirtd_configuration">libvirtd configuration file</a>
    </h2>
    <p>
Libvirtd (the remote daemon) is configured from a file called
<code>/etc/libvirt/libvirtd.conf</code>, or specified on
the command line using <code>-f filename</code> or
<code>--config filename</code>.
</p>
    <p>
This file should contain lines of the form below.
Blank lines and comments beginning with <code>#</code> are ignored.
</p>
    <pre>setting = value</pre>
    <p>The following settings, values and default are:</p>
    <table class="top_table">
      <tr>
        <th> Line </th>
        <th> Default </th>
        <th> Meaning </th>
      </tr>
      <tr>
        <td> listen_tls <i>[0|1]</i> </td>
        <td> 1 (on) </td>
        <td>
  Listen for secure TLS connections on the public TCP/IP port.
  Note: it is also necessary to start the server in listening mode by
  running it with --listen or editing /etc/sysconfig/libvirtd by uncommenting the LIBVIRTD_ARGS="--listen" line
  to cause the server to come up in listening mode whenever it is started.
</td>
      </tr>
      <tr>
        <td> listen_tcp <i>[0|1]</i> </td>
        <td> 0 (off) </td>
        <td>
  Listen for unencrypted TCP connections on the public TCP/IP port.
  Note: it is also necessary to start the server in listening mode.
</td>
      </tr>
      <tr>
        <td> tls_port <i>"service"</i> </td>
        <td> "16514" </td>
        <td>
  The port number or service name to listen on for secure TLS connections.
</td>
      </tr>
      <tr>
        <td> tcp_port <i>"service"</i> </td>
        <td> "16509" </td>
        <td>
  The port number or service name to listen on for unencrypted TCP connections.
</td>
      </tr>
      <tr>
        <td> unix_sock_group <i>"groupname"</i> </td>
        <td> "root" </td>
        <td>
  The UNIX group to own the UNIX domain socket. If the socket permissions allow
  group access, then applications running under matching group can access the
  socket. Only valid if running as root
</td>
      </tr>
      <tr>
        <td> unix_sock_ro_perms <i>"octal-perms"</i> </td>
        <td> "0777" </td>
        <td>
  The permissions for the UNIX domain socket for read-only client connections.
  The default allows any user to monitor domains.
</td>
      </tr>
      <tr>
        <td> unix_sock_rw_perms <i>"octal-perms"</i> </td>
        <td> "0700" </td>
        <td>
  The permissions for the UNIX domain socket for read-write client connections.
  The default allows only root to manage domains.
</td>
      </tr>
      <tr>
        <td> tls_no_verify_certificate <i>[0|1]</i> </td>
        <td> 0 (certificates are verified) </td>
        <td>
  If set to 1 then if a client certificate check fails, it is not an error.
</td>
      </tr>
      <tr>
        <td> tls_no_verify_address <i>[0|1]</i> </td>
        <td> 0 (addresses are verified) </td>
        <td>
  If set to 1 then if a client IP address check fails, it is not an error.
</td>
      </tr>
      <tr>
        <td> key_file <i>"filename"</i> </td>
        <td> "/etc/pki/libvirt/ private/serverkey.pem" </td>
        <td>
  Change the path used to find the server's private key.
  If you set this to an empty string, then no private key is loaded.
</td>
      </tr>
      <tr>
        <td> cert_file <i>"filename"</i> </td>
        <td> "/etc/pki/libvirt/ servercert.pem" </td>
        <td>
  Change the path used to find the server's certificate.
  If you set this to an empty string, then no certificate is loaded.
</td>
      </tr>
      <tr>
        <td> ca_file <i>"filename"</i> </td>
        <td> "/etc/pki/CA/cacert.pem" </td>
        <td>
  Change the path used to find the trusted CA certificate.
  If you set this to an empty string, then no trusted CA certificate is loaded.
</td>
      </tr>
      <tr>
        <td> crl_file <i>"filename"</i> </td>
        <td> (no CRL file is used) </td>
        <td>
  Change the path used to find the CA certificate revocation list (CRL) file.
  If you set this to an empty string, then no CRL is loaded.
</td>
      </tr>
      <tr>
        <td> tls_allowed_dn_list ["DN1", "DN2"] </td>
        <td> (none - DNs are not checked) </td>
        <td>
          <p>
  Enable an access control list of client certificate Distinguished
  Names (DNs) which can connect to the TLS port on this server.
  </p>
          <p>
  The default is that DNs are not checked.
  </p>
          <p>
  This list may contain wildcards such as <code>"C=GB,ST=London,L=London,O=Libvirt Project,CN=*"</code>
  See the POSIX <code>fnmatch</code> function for the format
  of the wildcards.
  </p>
          <p>
  Note that if this is an empty list, <i>no client can connect</i>.
  </p>
          <p>
  Note also that GnuTLS returns DNs without spaces
  after commas between the fields (and this is what we check against),
  but the <code>openssl x509</code> tool shows spaces.
</p>
        </td>
      </tr>
    </table>
    <h2>
      <a id="Remote_IPv6">IPv6 support</a>
    </h2>
    <p>
The libvirtd service and libvirt remote client driver both use the
<code>getaddrinfo()</code> functions for name resolution and are
thus fully IPv6 enabled. ie, if a server has IPv6 address configured
the daemon will listen for incoming connections on both IPv4 and IPv6
protocols. If a client has an IPv6 address configured and the DNS
address resolved for a service is reachable over IPv6, then an IPv6
connection will be made, otherwise IPv4 will be used. In summary it
should just 'do the right thing(tm)'.
</p>
    <h2>
      <a id="Remote_limitations">Limitations</a>
    </h2>
    <ul>
      <li> Fine-grained authentication: libvirt in general,
but in particular the remote case should support more
fine-grained authentication for operations, rather than
just read-write/read-only as at present.
</li>
    </ul>
    <p>
Please come and discuss these issues and more on <a href="https://www.redhat.com/mailman/listinfo/libvir-list" title="libvir-list mailing list">the mailing list</a>.
</p>
  </body>
</html>
